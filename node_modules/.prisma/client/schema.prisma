datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum HouseholdRole {
  ADMIN
  MEMBER
}

enum ChoreStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum SubtaskStatus {
  PENDING
  COMPLETED
}

enum TransactionStatus {
  PENDING
  COMPLETED
}

enum NotificationType {
  MESSAGE
  CHORE
  EXPENSE
  EVENT
  OTHER
}

enum Provider {
  GOOGLE
  FACEBOOK
  APPLE
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  passwordHash    String?
  name            String
  profileImageURL String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deviceTokens    String[] @default([])

  households        HouseholdMember[]
  messages          Message[]
  threads           Thread[]
  assignedChores    Chore[]            @relation("UserAssignedChores")
  expensesPaid      Expense[]
  expenseSplits     ExpenseSplit[]
  transactionsFrom  Transaction[]      @relation("TransactionsFrom")
  transactionsTo    Transaction[]      @relation("TransactionsTo")
  notifications     Notification[]
  oauthIntegrations OAuthIntegration[]
  eventsCreated     Event[]
}

model Household {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  HouseholdMember[]
  messages Message[]
  chores   Chore[]
  expenses Expense[]
  events   Event[]
}

model HouseholdMember {
  id          String        @id @default(uuid())
  userId      String
  householdId String
  role        HouseholdRole @default(MEMBER)
  joinedAt    DateTime      @default(now())

  user      User      @relation(fields: [userId], references: [id])
  household Household @relation(fields: [householdId], references: [id])

  @@unique([userId, householdId])
}

model Message {
  id          String   @id @default(uuid())
  householdId String
  authorId    String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  household Household @relation(fields: [householdId], references: [id])
  author    User      @relation(fields: [authorId], references: [id])

  threads     Thread[]
  attachments Attachment[]
}

model Thread {
  id        String   @id @default(uuid())
  messageId String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message Message @relation(fields: [messageId], references: [id])
  author  User    @relation(fields: [authorId], references: [id])

  attachments Attachment[]
}

model Attachment {
  id        String   @id @default(uuid())
  messageId String?
  threadId  String?
  url       String
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message Message? @relation(fields: [messageId], references: [id])
  thread  Thread?  @relation(fields: [threadId], references: [id])

  @@index([messageId])
  @@index([threadId])
}

model Chore {
  id          String      @id @default(uuid())
  householdId String
  title       String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  dueDate     DateTime?
  status      ChoreStatus @default(PENDING)
  recurrence  String?
  priority    Int?
  eventId     String?     @unique

  household     Household @relation(fields: [householdId], references: [id])
  subtasks      Subtask[]
  assignedUsers User[]    @relation("UserAssignedChores")
  event         Event?    @relation("ChoreEvent", fields: [eventId], references: [id])
}

model Subtask {
  id      String        @id @default(uuid())
  choreId String
  title   String
  status  SubtaskStatus @default(PENDING)

  chore Chore @relation(fields: [choreId], references: [id])
}

model Expense {
  id          String    @id @default(uuid())
  householdId String
  amount      Float
  description String
  paidById    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime?
  category    String?

  household    Household      @relation(fields: [householdId], references: [id])
  paidBy       User           @relation(fields: [paidById], references: [id])
  splits       ExpenseSplit[]
  transactions Transaction[]
}

model ExpenseSplit {
  id        String @id @default(uuid())
  expenseId String
  userId    String
  amount    Float

  expense Expense @relation(fields: [expenseId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
}

model Transaction {
  id         String            @id @default(uuid())
  expenseId  String
  fromUserId String
  toUserId   String
  amount     Float
  status     TransactionStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  expense  Expense @relation(fields: [expenseId], references: [id])
  fromUser User    @relation("TransactionsFrom", fields: [fromUserId], references: [id])
  toUser   User    @relation("TransactionsTo", fields: [toUserId], references: [id])
}

model Event {
  id          String   @id @default(uuid())
  householdId String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  choreId     String?  @unique

  household Household @relation(fields: [householdId], references: [id])
  createdBy User      @relation(fields: [createdById], references: [id])
  chore     Chore?    @relation("ChoreEvent")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model OAuthIntegration {
  id           String    @id @default(uuid())
  userId       String
  provider     Provider
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, provider])
}
