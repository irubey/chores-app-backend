
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.19.1
 * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
 */
Prisma.prismaVersion = {
  client: "5.19.1",
  engine: "69d742ee20b815d88e17e54db4a2a7a3b30324e3"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  profileImageURL: 'profileImageURL',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deviceTokens: 'deviceTokens',
  deletedAt: 'deletedAt'
};

exports.Prisma.HouseholdScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  currency: 'currency',
  icon: 'icon',
  timezone: 'timezone',
  language: 'language',
  deletedAt: 'deletedAt'
};

exports.Prisma.HouseholdMemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  householdId: 'householdId',
  role: 'role',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  isInvited: 'isInvited',
  isAccepted: 'isAccepted',
  isRejected: 'isRejected',
  isSelected: 'isSelected',
  lastAssignedChoreAt: 'lastAssignedChoreAt'
};

exports.Prisma.RecurrenceRuleScalarFieldEnum = {
  id: 'id',
  frequency: 'frequency',
  interval: 'interval',
  byWeekDay: 'byWeekDay',
  byMonthDay: 'byMonthDay',
  bySetPos: 'bySetPos',
  count: 'count',
  until: 'until',
  customRuleString: 'customRuleString'
};

exports.Prisma.ThreadScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  authorId: 'authorId',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  threadId: 'threadId',
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ReactionScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  emoji: 'emoji',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.MentionScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  mentionedAt: 'mentionedAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  url: 'url',
  fileType: 'fileType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.MessageReadScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  readAt: 'readAt'
};

exports.Prisma.ChoreScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dueDate: 'dueDate',
  status: 'status',
  priority: 'priority',
  eventId: 'eventId',
  recurrenceRuleId: 'recurrenceRuleId',
  deletedAt: 'deletedAt'
};

exports.Prisma.SubtaskScalarFieldEnum = {
  id: 'id',
  choreId: 'choreId',
  title: 'title',
  description: 'description',
  status: 'status'
};

exports.Prisma.ChoreAssignmentScalarFieldEnum = {
  id: 'id',
  choreId: 'choreId',
  userId: 'userId',
  assignedAt: 'assignedAt',
  completedAt: 'completedAt'
};

exports.Prisma.ChoreSwapRequestScalarFieldEnum = {
  id: 'id',
  choreId: 'choreId',
  requestingUserId: 'requestingUserId',
  targetUserId: 'targetUserId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChoreTemplateScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubtaskTemplateScalarFieldEnum = {
  id: 'id',
  choreTemplateId: 'choreTemplateId',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChoreHistoryScalarFieldEnum = {
  id: 'id',
  choreId: 'choreId',
  action: 'action',
  changedById: 'changedById',
  changedAt: 'changedAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  amount: 'amount',
  description: 'description',
  paidById: 'paidById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dueDate: 'dueDate',
  deletedAt: 'deletedAt',
  category: 'category'
};

exports.Prisma.ExpenseSplitScalarFieldEnum = {
  id: 'id',
  expenseId: 'expenseId',
  userId: 'userId',
  amount: 'amount'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  expenseId: 'expenseId',
  fromUserId: 'fromUserId',
  toUserId: 'toUserId',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ReceiptScalarFieldEnum = {
  id: 'id',
  expenseId: 'expenseId',
  url: 'url',
  fileType: 'fileType',
  createdAt: 'createdAt'
};

exports.Prisma.ExpenseHistoryScalarFieldEnum = {
  id: 'id',
  expenseId: 'expenseId',
  action: 'action',
  changedById: 'changedById',
  changedAt: 'changedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  title: 'title',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  choreId: 'choreId',
  recurrenceRuleId: 'recurrenceRuleId',
  category: 'category',
  isAllDay: 'isAllDay',
  location: 'location',
  isPrivate: 'isPrivate',
  status: 'status',
  deletedAt: 'deletedAt'
};

exports.Prisma.EventReminderScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  time: 'time',
  type: 'type'
};

exports.Prisma.CalendarEventHistoryScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  action: 'action',
  changedById: 'changedById',
  changedAt: 'changedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  householdId: 'householdId',
  messageNotif: 'messageNotif',
  mentionsNotif: 'mentionsNotif',
  reactionsNotif: 'reactionsNotif',
  choreNotif: 'choreNotif',
  financeNotif: 'financeNotif',
  calendarNotif: 'calendarNotif',
  remindersNotif: 'remindersNotif'
};

exports.Prisma.OAuthIntegrationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.HouseholdRole = exports.$Enums.HouseholdRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

exports.RecurrenceFrequency = exports.$Enums.RecurrenceFrequency = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  BIWEEKLY: 'BIWEEKLY',
  MONTHLY: 'MONTHLY',
  QUADRENNIAL: 'QUADRENNIAL',
  YEARLY: 'YEARLY'
};

exports.DaysOfWeek = exports.$Enums.DaysOfWeek = {
  SUNDAY: 'SUNDAY',
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY'
};

exports.ReactionType = exports.$Enums.ReactionType = {
  LIKE: 'LIKE',
  LOVE: 'LOVE',
  HAHA: 'HAHA',
  WOW: 'WOW',
  SAD: 'SAD',
  ANGRY: 'ANGRY'
};

exports.ChoreStatus = exports.$Enums.ChoreStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

exports.SubtaskStatus = exports.$Enums.SubtaskStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED'
};

exports.ChoreSwapRequestStatus = exports.$Enums.ChoreSwapRequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.ChoreAction = exports.$Enums.ChoreAction = {
  CREATED: 'CREATED',
  UPDATED: 'UPDATED',
  COMPLETED: 'COMPLETED',
  ASSIGNED: 'ASSIGNED',
  DELETED: 'DELETED',
  SWAPPED: 'SWAPPED',
  TEMPLATE_CREATED: 'TEMPLATE_CREATED',
  TEMPLATE_UPDATED: 'TEMPLATE_UPDATED',
  TEMPLATE_DELETED: 'TEMPLATE_DELETED',
  RECURRENCE_CHANGED: 'RECURRENCE_CHANGED'
};

exports.ExpenseCategory = exports.$Enums.ExpenseCategory = {
  FOOD: 'FOOD',
  TRANSPORTATION: 'TRANSPORTATION',
  HOUSING: 'HOUSING',
  UTILITIES: 'UTILITIES',
  ENTERTAINMENT: 'ENTERTAINMENT',
  OTHER: 'OTHER'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED'
};

exports.ExpenseAction = exports.$Enums.ExpenseAction = {
  CREATED: 'CREATED',
  UPDATED: 'UPDATED',
  PAID: 'PAID',
  SPLIT: 'SPLIT',
  DELETED: 'DELETED',
  RECEIPT_UPLOADED: 'RECEIPT_UPLOADED'
};

exports.EventCategory = exports.$Enums.EventCategory = {
  CHORE: 'CHORE',
  MEETING: 'MEETING',
  SOCIAL: 'SOCIAL',
  OTHER: 'OTHER'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  SCHEDULED: 'SCHEDULED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.EventReminderType = exports.$Enums.EventReminderType = {
  PUSH_NOTIFICATION: 'PUSH_NOTIFICATION',
  EMAIL: 'EMAIL',
  SMS: 'SMS'
};

exports.CalendarEventAction = exports.$Enums.CalendarEventAction = {
  CREATED: 'CREATED',
  UPDATED: 'UPDATED',
  DELETED: 'DELETED',
  STATUS_CHANGED: 'STATUS_CHANGED',
  RECURRENCE_CHANGED: 'RECURRENCE_CHANGED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  NEW_MESSAGE: 'NEW_MESSAGE',
  CHORE_ASSIGNED: 'CHORE_ASSIGNED',
  EXPENSE_UPDATED: 'EXPENSE_UPDATED',
  PAYMENT_REMINDER: 'PAYMENT_REMINDER',
  EVENT_REMINDER: 'EVENT_REMINDER',
  OTHER: 'OTHER'
};

exports.Provider = exports.$Enums.Provider = {
  GOOGLE: 'GOOGLE',
  FACEBOOK: 'FACEBOOK',
  APPLE: 'APPLE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Household: 'Household',
  HouseholdMember: 'HouseholdMember',
  RecurrenceRule: 'RecurrenceRule',
  Thread: 'Thread',
  Message: 'Message',
  Reaction: 'Reaction',
  Mention: 'Mention',
  Attachment: 'Attachment',
  MessageRead: 'MessageRead',
  Chore: 'Chore',
  Subtask: 'Subtask',
  ChoreAssignment: 'ChoreAssignment',
  ChoreSwapRequest: 'ChoreSwapRequest',
  ChoreTemplate: 'ChoreTemplate',
  SubtaskTemplate: 'SubtaskTemplate',
  ChoreHistory: 'ChoreHistory',
  Expense: 'Expense',
  ExpenseSplit: 'ExpenseSplit',
  Transaction: 'Transaction',
  Receipt: 'Receipt',
  ExpenseHistory: 'ExpenseHistory',
  Event: 'Event',
  EventReminder: 'EventReminder',
  CalendarEventHistory: 'CalendarEventHistory',
  Notification: 'Notification',
  NotificationSettings: 'NotificationSettings',
  OAuthIntegration: 'OAuthIntegration'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
