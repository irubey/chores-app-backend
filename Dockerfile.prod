# backend/Dockerfile.prod

# Build stage
FROM node:20-slim AS builder

WORKDIR /app

# Install OpenSSL and other required packages
RUN apt-get update && \
    apt-get install -y openssl ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Copy package files
COPY package*.json ./

# Create .npmrc file using ARG
ARG NPM_TOKEN
RUN echo "@irubey:registry=https://npm.pkg.github.com/\n//npm.pkg.github.com/:_authToken=\${NPM_TOKEN}\nalways-auth=true" > .npmrc

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Generate Prisma client with explicit SSL parameters
ENV PRISMA_CLI_BINARY_TARGETS=linux-musl,debian-openssl-3.0.x
RUN npx prisma generate

# Build the application
RUN npm run build

# Production stage
FROM node:20-slim AS production

WORKDIR /app

# Install OpenSSL and other required packages
RUN apt-get update && \
    apt-get install -y openssl ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Copy package files
COPY package*.json ./

# Create .npmrc file using ARG again
ARG NPM_TOKEN
RUN echo "@irubey:registry=https://npm.pkg.github.com/\n//npm.pkg.github.com/:_authToken=${NPM_TOKEN}\nalways-auth=true" > .npmrc

# Install production dependencies including tsconfig-paths
RUN npm ci --only=production && \
    npm install tsconfig-paths && \
    rm -f .npmrc

# Copy built assets from builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/tsconfig*.json ./

# Set production environment
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048"
ENV PRISMA_CLI_BINARY_TARGETS=linux-musl,debian-openssl-3.0.x

# Create a startup script
COPY <<'EOF' /app/start.sh
#!/bin/sh
echo "Running database migrations..."
npx prisma migrate deploy
echo "Starting the application..."
exec node -r tsconfig-paths/register dist/app.js
EOF

RUN chmod +x /app/start.sh

# Expose the port
EXPOSE 3000

# Use the startup script as the entry point
CMD ["/app/start.sh"]