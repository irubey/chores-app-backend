generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OAuthProvider {
  GOOGLE
  FACEBOOK
  APPLE
}


enum UserRole {
  ADMIN
  MEMBER
}


enum HouseholdStatus {
  ACTIVE
  INACTIVE
}


enum ChoreStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}


enum ChoreFrequency {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}


enum ChorePriority {
  LOW
  MEDIUM
  HIGH
}


enum NotificationType {
  CHORE_ASSIGNED
  CHORE_COMPLETED
  CHORE_DUE_SOON
  HOUSEHOLD_INVITE
}


model User {
  id                   String               @id @default(uuid())
  email                String               @unique
  name                 String
  oauth_provider       OAuthProvider
  oauth_id             String               @unique
  role                 UserRole             @default(MEMBER)
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  householdMembers     HouseholdMember[]
  notifications        Notification[]
  preferences          UserPreference?
  calendarIntegration  CalendarIntegration?
  choreActivities      ChoreActivity[]
  badges               UserBadge[]
}

// Household model: Represents a group of users sharing chores
model Household {
  id         String            @id @default(uuid())
  name       String
  status     HouseholdStatus   @default(ACTIVE)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  chores     Chore[]
  members    HouseholdMember[]
}

// HouseholdMember model: Represents a user's membership in a household
model HouseholdMember {
  user_id      String
  household_id String
  role         UserRole   @default(MEMBER)
  joined_at    DateTime   @default(now())
  household    Household  @relation(fields: [household_id], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, household_id])
  @@index([household_id])
  @@index([user_id])
}

// Chore model: Represents a task within a household
model Chore {
  id            String         @id @default(uuid())
  household_id  String
  title         String
  description   String?
  time_estimate Int?
  frequency     ChoreFrequency
  assigned_to   String[]
  status        ChoreStatus    @default(PENDING)
  priority      ChorePriority  @default(MEDIUM)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  due_date      DateTime?
  last_completed DateTime?
  household     Household      @relation(fields: [household_id], references: [id], onDelete: Cascade)
  notifications Notification[]
  template_id   String?
  template      ChoreTemplate? @relation(fields: [template_id], references: [id])
  activities    ChoreActivity[]
}

// Notification model: Represents notifications sent to users
model Notification {
  id       String           @id @default(uuid())
  user_id  String
  chore_id String?
  type     NotificationType
  message  String?
  sent_at  DateTime         @default(now())
  read     Boolean          @default(false)
  chore    Chore?           @relation(fields: [chore_id], references: [id])
  user     User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// ChoreTemplate model: Represents preset chore templates
model ChoreTemplate {
  id            String         @id @default(uuid())
  title         String         @unique
  description   String?
  time_estimate Int?
  frequency     ChoreFrequency
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  chores        Chore[]
  is_preset     Boolean        @default(false)
}

// UserPreference model: Stores user-specific preferences
model UserPreference {
  id      String @id @default(uuid())
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  notification_preferences Json?
  chore_preferences        Json?
  theme                    String? @default("light")
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
}

// Badge model: Represents achievement badges for users
model Badge {
  id          String     @id @default(uuid())
  name        String
  description String
  icon_url    String
  users       UserBadge[]
}

// CalendarIntegration model: Manages calendar integrations for users
model CalendarIntegration {
  id            String   @id @default(uuid())
  user_id       String   @unique
  provider      String
  access_token  String
  refresh_token String?
  expires_at    DateTime?
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// ChoreActivity model: Tracks activity log for chores
model ChoreActivity {
  id         String   @id @default(uuid())
  chore_id   String
  chore      Chore    @relation(fields: [chore_id], references: [id])
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  action     String
  created_at DateTime @default(now())

  @@index([chore_id])
  @@index([user_id])
}

model UserBadge {
  user     User   @relation(fields: [user_id], references: [id])
  user_id  String
  badge    Badge  @relation(fields: [badge_id], references: [id])
  badge_id String
  awarded_at DateTime @default(now())

  @@id([user_id, badge_id])
}